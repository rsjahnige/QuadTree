/***************************************************
>> File: QTQuad.cpp
>> Author: Ryan Jahnige
>> Class: CMSC 341
>> Description: Implementation of Quadtree nodes for projects 3
*****************************************************/
#include "Point.h"
#include "BBox.h"
#include "QTQuad.h"
#include <math.h> // sqtr() used to accont for change in QTQ_NUM_QUAD bounds
#include <stdexcept>
using namespace std;

// Default constructor
QTQuad::QTQuad()
{
  m_quads[QTQ_NUM_QUADS] = {nullptr};
  m_cells = nullptr;
}

// Destructor
QTQuad::~QTQuad()
{
  // Delete m_quads
  for (int i = 0; i < QTQ_NUM_QUADS; i++)
    {
      if (m_quads[i] != nullptr)
	{
	  delete m_quads[i];
	  m_quads[i] = nullptr;
	}
    }

  // Delete m_cells
  if (m_cells != nullptr)
    {
      delete [] m_cells;
      m_cells = nullptr;
    }
}

// Return specific point within the data structure
int QTQuad::get(const Point &pt, const BBox &bounds)
{
  if (!bounds.inBounds(pt))
    {
      throw out_of_range("QTQuad::get : Point is not within dimensions");
    }

  // Used to find next quadrant to descend to
  Point nQuad = findQuad(pt, bounds);
  int nextQuad = sqrt(QTQ_NUM_QUADS) * nQuad.m_y + nQuad.m_x;

  // Checks if the bounds are the size of m_cells
  if (bounds.m_dim == QTQ_GRID_DIM)
    {
      int x, y;
      x = pt.m_x - bounds.m_bL.m_x;
      y = pt.m_y - bounds.m_bL.m_y;

      return m_cells[x][y];
    }

  // Checks for virtual data
  else if (m_quads[nextQuad] == nullptr)
    {
      return 0;
    }

  return m_quads[nextQuad] -> get(pt, newBounds(pt, bounds)); // recursive call
}

void QTQuad::set(const Point &pt, int data, const BBox &bounds)
{
  if (!bounds.inBounds(pt))
    {
      throw out_of_range("QTQuad::set : Point is not within dimensions");
    }

  // Find next quadrant
  Point nQuad = findQuad(pt, bounds);
  int nextQuad = sqrt(QTQ_NUM_QUADS) * nQuad.m_y + nQuad.m_x;

  // Bounds must reach size of m_cells to set a value
  if (bounds.m_dim == QTQ_GRID_DIM)
    {
      if (m_cells == nullptr)
	{
	  m_cells = new int[QTQ_GRID_DIM][QTQ_GRID_DIM]();
	  initCells();
	}
      
      int x, y;
      x = pt.m_x - bounds.m_bL.m_x;
      y = pt.m_y - bounds.m_bL.m_y;

      m_cells[x][y] = data;
      
      return;
    }

  // If quadrant is virtual, creates new QTQuad
  else if (m_quads[nextQuad] == nullptr)
    {
      m_quads[nextQuad] = new QTQuad();

      // Needed for iterator
      m_quads[nextQuad] -> m_parent = this;
                           |      if (m_quads[i] != nullptr)
  // Prunning                                                             m_quads[nextQuad] -> childIndex = nextQuad;
    }
  
  m_quads[nextQuad] -> set(pt, data, newBounds(pt, bounds)); // recursive call
}

int QTQuad::increment(const Point &pt, int delta, const BBox &bounds)
{
  if (!bounds.inBounds(pt))
    {
      throw out_of_range("QTQuad::increment : Point is not within dimensions");
    }
  
  Point nQuad = findQuad(pt, bounds);
  int nextQuad = sqrt(QTQ_NUM_QUADS) * nQuad.m_y + nQuad.m_x;
  
  if (bounds.m_dim == QTQ_GRID_DIM)
    {
      if (m_cells == nullptr)
	{
	  m_cells = new int[QTQ_GRID_DIM][QTQ_GRID_DIM]();
	  initCells();
	}
      
      int x, y;
      x = pt.m_x - bounds.m_bL.m_x;
      y = pt.m_y - bounds.m_bL.m_y;
      
      return m_cells[x][y] += delta;
    }
  else if (m_quads[nextQuad] == nullptr)
    {
      m_quads[nextQuad] = new QTQuad();

      // Needed for iterator
      m_quads[nextQuad] -> m_parent = this;
      m_quads[nextQuad] -> childIndex = nextQuad;
    }
  
  return m_quads[nextQuad] -> increment(pt, delta, newBounds(pt, bounds));
}

void QTQuad::clearAll()
{
  for (int i = 0; i < QTQ_NUM_QUADS; i++)
    {
      if (m_quads[i] != nullptr)
	{
	  delete (this -> m_quads[i]);
	  m_quads[i] = nullptr;
	}
    }

  if (m_cells != nullptr)
    {
      delete [] m_cells;
      m_cells = nullptr;
    }
}

QTQuad* QTQuad::tryPrune(const Point &pt, const BBox &bounds)
{
  Point nQuad = findQuad(pt, bounds);
  int nextQuad = sqrt(QTQ_NUM_QUADS) * nQuad.m_y + nQuad.m_x;
  
  if (m_cells != nullptr)
    {
      if (isEmpty())
	{
	  return this;
	}
      else
	{
	  return nullptr;
	}
    }

  QTQuad *temp = m_quads[nextQuad] -> tryPrune(pt, newBounds(pt, bounds));

  if (temp != nullptr && singleLink())
    {
      return this;
    }

  return temp;
}

// Determines if current quad has only one child node
// Used for prunning of tree
bool QTQuad::singleLink()
{
  int count = 0;
  for (int i = 0; i < QTQ_NUM_QUADS; i++)
    {
      if (m_quads[i] != nullptr)
	{
	  count += 1;
	}
    }

  if (count == 1)
    {
      return true;
    }
  else
    {
      return false;
    }
}

// Determines if current m_cells is all 0
// Used when prunning
bool QTQuad::isEmpty()
{
  for (int i = 0; i < QTQ_GRID_DIM; i++)
    {
      for (int j = 0; j < QTQ_GRID_DIM; j++)
	{
	  if (m_cells[i][j] != 0)
	    {
	      return false;
	    }
	}
    }

  return true;
}

// Intializes all cells within currrent m_cells to 0
void QTQuad::initCells()
{
  for (int i = 0; i < QTQ_GRID_DIM; i++)
    {
      for (int j = 0; j < QTQ_GRID_DIM; j++)
	{
	  m_cells[i][j] = 0;
	}
    }
}

// Determines new bounds of quad while moving down the board
// Much like downShift() but takes in a point as opposed to an
// integer.
BBox QTQuad::newBounds(const Point &pt, const BBox &bounds)
{
  Point nQuad = findQuad(pt, bounds);
  Point newPt;
  BBox newBounds;
  int newDim = bounds.m_dim / sqrt(QTQ_NUM_QUADS); // Assumes square grids
  
  newPt.m_x = nQuad.m_x * newDim + bounds.m_bL.m_x;
  newPt.m_y = nQuad.m_y * newDim + bounds.m_bL.m_y;
  newBounds.m_bL.m_x = newPt.m_x;
  newBounds.m_bL.m_y = newPt.m_y;
  newBounds.m_dim = newDim;

  return newBounds;
}

// Coordinate represents next quadrant as shift in x,y values
// i.e. quad iv = (1,1) quad i = (0,0)
Point QTQuad::findQuad(const Point &pt, const BBox &bounds)
{
  Point nQuad(0,0);

  int newDim = bounds.m_dim / sqrt(QTQ_NUM_QUADS); // Assumes square grid
  while (pt.m_y >= bounds.m_bL.m_y + newDim)
    {
      nQuad.m_y += 1;
      newDim += newDim;
    }

  newDim = bounds.m_dim / sqrt(QTQ_NUM_QUADS); // Resets newDim
  while (pt.m_x >= bounds.m_bL.m_x + newDim)
    {
      nQuad.m_x += 1;
      newDim += newDim;
    }

  return nQuad;
}   

/********************************************************
 ** Iterator Functions
 ********************************************************/

// Finds first non-0 cell within tree
bool QTQuad::getFirst(Point &pt, QTQuad *&currQuad, const BBox &bounds, int index)
{
  // If leaf node, search for coordinate of first non-0 cell
  if (m_cells != nullptr)
    {
      for (int i = 0; i < QTQ_GRID_DIM; i++)
	{
	  for (int j = 0; j < QTQ_GRID_DIM; j++)
	    {
	      if (m_cells[i][j] != 0)
		{
		  pt.m_x = bounds.m_bL.m_x + i;
		  pt.m_y = bounds.m_bL.m_y + j;
		  currQuad = this;
		  return true;
		}
	    }
	}
    }

  // Searches QuadTree in order of quadrant I - IV
  for (int i = index; i < QTQ_NUM_QUADS; i++)
    {
      if (m_quads[i] != nullptr)
	{
	  if (m_quads[i] -> getFirst(pt, currQuad, downShift(i, bounds)))
	    {
	      return true;
	    }
	  else
	    {
	      return false;
	    }
	}
    }

  return false;
}

// Gets next non-o cell, works for test 3 but when testing
// with Life.cpp < pts01.txt it segfaults when tryign to
// access m_cells[1][0] even though there is data there
bool QTQuad::getNext(Point &pt, QTQuad *&currQuad)
{
  // Initializes data
  int x = pt.m_x % QTQ_GRID_DIM;
  int y = pt.m_y % QTQ_GRID_DIM;
  Point origin(pt.m_x - x, pt.m_y - y);
  BBox currBounds(origin, QTQ_GRID_DIM);

  if (m_cells != nullptr)
    {
      // Loops through remaining cells in current leaf quad
      y += 1;
      for (int i = x; i < QTQ_GRID_DIM; i++)
	{
	  for (int j = y; j < QTQ_GRID_DIM; j++)
	    {
	      // Problem when testing with Life.cpp
	      // m_cells = nullptr??????
	      if (m_cells[i][j] != 0)
		{
		  pt.m_x = origin.m_x + i;
		  pt.m_y = origin.m_y + j;
		  return true;
		}
	    }
	  
	  y = 0;
	}
    }
  // Cell of current iterator was set to 0 and deleted, need to find new position
  else
    {
      throw out_of_range("I ran out of time and was not able to implement this case :(, check QTQuad.cpp: 370"); 
    }

  // Finds next leaf quad, if non returns false
  return getNextQuad(pt, currQuad, currBounds);
}

// Use to move up the tree with the iterator
bool QTQuad::getNextQuad(Point &pt, QTQuad *&currQuad, const BBox &bounds)
{
  if (m_parent == nullptr)
    {
      return false;
    }
  else if (m_parent -> getFirst(pt, currQuad, upShift(childIndex, bounds), childIndex + 1))
    {
      return true;
    }
    
  return m_parent -> getNextQuad(pt, currQuad, upShift(childIndex, bounds));
    
}

// Used when moving down the tree with the iterator,
// only effective when QTQ_NUM_QUADS = 4
BBox QTQuad::downShift(int nQuad, const BBox &bounds)
{
  BBox shift;
  shift.m_dim = bounds.m_dim / sqrt(QTQ_NUM_QUADS);
  
  switch (nQuad)
    {
    case 0:
      shift.m_bL.m_x = bounds.m_bL.m_x;
      shift.m_bL.m_y = bounds.m_bL.m_y;
      break;

    case 1:
      shift.m_bL.m_x = bounds.m_bL.m_x + shift.m_dim;
      shift.m_bL.m_y = bounds.m_bL.m_y;
      break;

    case 2:
      shift.m_bL.m_x = bounds.m_bL.m_x;
      shift.m_bL.m_y = bounds.m_bL.m_y + shift.m_dim;
      break;

    case 3:
      shift.m_bL.m_x = bounds.m_bL.m_x + shift.m_dim;
      shift.m_bL.m_y = bounds.m_bL.m_y + shift.m_dim;
      break;
    }

  return shift;
}

// Used when moving up the tree with the iterator,
// only effective when QTQ_NUM_QUADS = 4
BBox QTQuad::upShift(int quadNum, const BBox &bounds)
{
  BBox shift;

  switch (quadNum)
    {
    case 0:
      shift.m_bL.m_x = bounds.m_bL.m_x;
      shift.m_bL.m_y = bounds.m_bL.m_y;
      break;

    case 1:
      shift.m_bL.m_x = bounds.m_bL.m_x - bounds.m_dim;
      shift.m_bL.m_y = bounds.m_bL.m_y;
      break;

    case 2:
      shift.m_bL.m_x = bounds.m_bL.m_x;
      shift.m_bL.m_y = bounds.m_bL.m_y - bounds.m_dim;
      break;

    case 3:
      shift.m_bL.m_x = bounds.m_bL.m_x - bounds.m_dim;
      shift.m_bL.m_y = bounds.m_bL.m_y - bounds.m_dim;
      break;
    }

  shift.m_dim = bounds.m_dim * sqrt(QTQ_NUM_QUADS);
  return shift;
}
