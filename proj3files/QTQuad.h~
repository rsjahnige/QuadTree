/*************************************************
>> File: QTQuad.h
>> Edited By: Ryan Jahnige
>> Class: CMSC 341
>> Description: Definition of variables and functions required
>>              by QTQuad class
 *************************************************/
#ifndef QTQUAD_H
#define QTQUAD_H

#include <utility>
#include <vector>
#include "Point.h"
#include "BBox.h"
using namespace std;

#define QTQ_NUM_QUADS 4
#define QTQ_GRID_DIM 4

class QuadTree;

class QTQuad {

public:

    QTQuad();
    ~QTQuad();

    // Retrieve cell value
    int get(const Point &pt, const BBox &bounds);

    // Set cell value
    void set(const Point &pt, int data, const BBox &bounds);

    // Modify cell value by a signed delta amount; faster then get() + set()
    int increment(const Point &pt, int delta, const BBox &bounds);

    // Clear all cells in subtree
    void clearAll();

    // Print out structure of a node and recursively dump subtrees
    void dump(const BBox &bounds);

    // Grading function.  Do not implement!
    bool inspect(QTQuad *(&quads)[QTQ_NUM_QUADS],
		 int (*&cells)[QTQ_GRID_DIM]);

  // For use with iterator
  bool getNext(Point &pt, QTQuad *&currQuad);

  // Returns pointer to first non-virtual cell
  QTQuad* tryPrune(const Point &pt, const BBox &bounds);
  bool singleLink(); // True if quad has only 1 child
  
 
private:

    // false if this is a leaf node, i.e. holds an actual data grid
    //
    // If we are acting as is an internal node, this field holds pointers
    // to its 4 subquadrants; if this is a leaf node, these must all be NULL!
    QTQuad *m_quads[QTQ_NUM_QUADS];

    // Alternatively, if we are a leaf node, this field points to a
    // dynamically allocated N x N grid (the strange declaration allows
    // it to act as a 2-D array.  If internal node, m_cells must be NULL!
    int (*m_cells)[QTQ_GRID_DIM];

    //
    // YOU CAN ADD ANY OTHER CONSTRUCTORS, MEMBER FUNCTIONS, MEMBER DATA, ETC.
    // AS NEEDED HERE.
    //
  bool valgrind = true;
  
  // Can only be called with leaf nodes
  bool isEmpty(); // True if all cell values in m_cells are 0
  void initCells();
  BBox newBounds(const Point &pt, const BBox &bounds);
  Point findQuad(const Point &pt, const BBox &bounds);
  
  // Iterator variables
  QTQuad *m_parent; // Parent of current node
  int childIndex = 0; // Index of current node within parent

  // Iterator Functions
  bool getFirst(Point &pt, QTQuad *&currQuad, const BBox &bounds, int index = 0);
  bool getNextQuad(Point &pt, QTQuad *&currQuad, const BBox &bounds);
  BBox downShift(int nQuad, const BBox &bounds);
  BBox upShift(int quadNum, const BBox &bounds);
  QTQuad* newIter(const Point &pt, const BBox &bounds, BBox &iterBounds);
  
    friend QuadTree;
};
#endif
